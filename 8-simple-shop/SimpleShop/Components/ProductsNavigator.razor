@using Microsoft.EntityFrameworkCore

<h3>Products</h3>

@if (ViewProducts is null)
{
    <p>Loading...</p>
}
else
{
    <table class="table table-sm table-bordered m-2">
        <thead>
        <tr>
            <th>Name</th>
            <th>Category</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var product in ViewProducts)
        {
            <tr>
                <td>@product.Name</td>
                <td>@product.Category?.Name</td>
            </tr>
        }
        </tbody>
    </table>
}

@code 
{
    [Inject]
    public required IProductsProvider ProductsProvider { get; set; }

    public Product[]? ViewProducts { get; set; }

    public int ProductsCount { get; set; }

    public int ViewProductsStart { get; set; }

    public int ViewProductsCount { get; set; } = 10;

    public int WindowIndex => ViewProductsStart / ProductsCount;
    
    public int WindowsCount => ProductsCount / ProductsCount;

    protected override async Task OnParametersSetAsync()
    {
        await Task.Delay(1000);
        ProductsCount = await ProductsProvider.Products.CountAsync();

        ViewProductsStart = 0;
        ViewProducts = await ProductsProvider.Products
            .Skip(ViewProductsStart)
            .Take(ViewProductsCount)
            .Include(p => p.Category)
            .ToArrayAsync();
    }
}